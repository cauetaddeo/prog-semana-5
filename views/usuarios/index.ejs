<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle || 'Gerenciar Usu√°rios' %></title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.3);
      overflow: hidden;
    }

    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }

    .header h1 {
      font-size: 2.5rem;
      margin-bottom: 10px;
    }

    .content {
      padding: 30px;
    }

    .form-section {
      background: #f8f9fa;
      border-radius: 10px;
      padding: 25px;
      margin-bottom: 30px;
      border: 1px solid #e9ecef;
    }

    .form-section h2 {
      color: #495057;
      margin-bottom: 20px;
      font-size: 1.5rem;
    }

    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
      margin-bottom: 20px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
    }

    .form-group.full-width {
      grid-column: 1 / -1;
    }

    label {
      font-weight: 600;
      color: #495057;
      margin-bottom: 5px;
    }

    input, select, textarea {
      padding: 12px;
      border: 2px solid #e9ecef;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
    }

    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 12px 25px;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-block;
      text-align: center;
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .btn-small {
      padding: 8px 15px;
      font-size: 0.9rem;
    }

    .btn-success {
      background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
    }

    .btn-danger {
      background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
    }

    .btn-primary {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }

    .actions-section {
      display: flex;
      gap: 15px;
      margin-bottom: 30px;
      justify-content: center;
    }

    .users-section {
      margin-top: 30px;
    }

    .users-section h2 {
      color: #495057;
      margin-bottom: 20px;
      font-size: 1.8rem;
      text-align: center;
    }

    .users-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
    }

    .user-card {
      background: white;
      border: 1px solid #e9ecef;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      transition: all 0.3s ease;
      text-align: center;
    }

    .user-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 20px rgba(0,0,0,0.15);
    }

    .user-avatar {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      margin: 0 auto 15px;
    }

    .user-card h3 {
      color: #495057;
      margin-bottom: 8px;
      font-size: 1.2rem;
    }

    .user-card p {
      color: #6c757d;
      margin-bottom: 15px;
      font-size: 0.9rem;
    }

    .user-actions {
      display: flex;
      gap: 10px;
      justify-content: center;
    }

    .no-users {
      text-align: center;
      padding: 40px;
      color: #6c757d;
    }

    .no-users div {
      font-size: 3rem;
      margin-bottom: 15px;
      opacity: 0.5;
    }

    .success-message {
      background: #d4edda;
      color: #155724;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      border: 1px solid #c3e6cb;
      display: none;
    }

    .error-message {
      background: #f8d7da;
      color: #721c24;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
      border: 1px solid #f5c6cb;
      display: none;
    }

    .loading {
      display: none;
      text-align: center;
      padding: 20px;
      color: #667eea;
    }

    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #667eea;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 2s linear infinite;
      margin: 0 auto 10px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .back-link {
      display: inline-block;
      margin-bottom: 20px;
      color: #667eea;
      text-decoration: none;
      font-weight: 600;
    }

    .back-link:hover {
      text-decoration: underline;
    }

    @media (max-width: 768px) {
      .form-grid {
        grid-template-columns: 1fr;
      }
      
      .actions-section {
        flex-direction: column;
        align-items: center;
      }
      
      .users-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üë• Gerenciar Usu√°rios</h1>
      <p>Cadastre os usu√°rios antes de gerenciar as tarefas</p>
    </div>

    <div class="content">
      <a href="/tarefas" class="back-link">‚Üê Voltar para Tarefas</a>

      <!-- Mensagens -->
      <div id="successMessage" class="success-message"></div>
      <div id="errorMessage" class="error-message"></div>
      <div id="loading" class="loading">
        <div class="spinner"></div>
        <p>Processando cadastro...</p>
      </div>

      <!-- Formul√°rio para Novo Usu√°rio -->
      <div class="form-section">
        <h2>‚ûï Adicionar Novo Usu√°rio</h2>
        <form id="userForm">
          <div class="form-grid">
            <div class="form-group">
              <label for="nome">Nome Completo</label>
              <input type="text" id="nome" name="nome" required placeholder="Digite o nome completo">
            </div>
            
            <div class="form-group">
              <label for="email">Email</label>
              <input type="email" id="email" name="email" required placeholder="usuario@exemplo.com">
            </div>
            
            <div class="form-group full-width">
              <label for="senha">Senha</label>
              <input type="password" id="senha" name="senha" required placeholder="Digite uma senha segura (m√≠nimo 6 caracteres)" minlength="6">
            </div>
          </div>
          
          <button type="submit" class="btn" id="submitBtn">Cadastrar Usu√°rio</button>
        </form>
      </div>

      <!-- A√ß√µes R√°pidas -->
      <div class="actions-section">
        <a href="/tarefas" class="btn btn-primary">üìã Ir para Tarefas</a>
        <a href="/dashboard" class="btn btn-success">üìä Ver Dashboard</a>
        <button onclick="loadUsers()" class="btn btn-primary">üîÑ Atualizar Lista</button>
      </div>

      <!-- Lista de Usu√°rios -->
      <div class="users-section">
        <h2>üë• Usu√°rios Cadastrados</h2>
        <div id="usersList" class="users-grid">
          <!-- Usu√°rios ser√£o carregados aqui via JavaScript -->
        </div>
      </div>
    </div>
  </div>

  <script>
    let users = [];

    // Fun√ß√£o para mostrar mensagens
    function showMessage(message, type = 'success') {
      const successDiv = document.getElementById('successMessage');
      const errorDiv = document.getElementById('errorMessage');
      
      if (type === 'success') {
        successDiv.textContent = message;
        successDiv.style.display = 'block';
        errorDiv.style.display = 'none';
        setTimeout(() => successDiv.style.display = 'none', 5000);
      } else {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
        successDiv.style.display = 'none';
        setTimeout(() => errorDiv.style.display = 'none', 5000);
      }
    }

    // Fun√ß√£o para mostrar/esconder loading
    function toggleLoading(show) {
      const loading = document.getElementById('loading');
      const submitBtn = document.getElementById('submitBtn');
      
      if (show) {
        loading.style.display = 'block';
        submitBtn.disabled = true;
        submitBtn.textContent = 'Cadastrando...';
      } else {
        loading.style.display = 'none';
        submitBtn.disabled = false;
        submitBtn.textContent = 'Cadastrar Usu√°rio';
      }
    }

    // Fun√ß√£o para carregar usu√°rios
    async function loadUsers() {
      try {
        const response = await fetch('/api/usuarios');
        if (!response.ok) throw new Error('Erro ao carregar usu√°rios');
        
        users = await response.json();
        renderUsers();
      } catch (error) {
        console.error('Erro:', error);
        document.getElementById('usersList').innerHTML = 
          '<div class="no-users"><div>‚ùå</div><h3>Erro ao carregar usu√°rios</h3></div>';
      }
    }

    // Fun√ß√£o para renderizar usu√°rios
    function renderUsers() {
      const usersList = document.getElementById('usersList');
      
      if (users.length === 0) {
        usersList.innerHTML = `
          <div class="no-users">
            <div>üë§</div>
            <h3>Nenhum usu√°rio cadastrado</h3>
            <p>Comece cadastrando o primeiro usu√°rio!</p>
          </div>
        `;
        return;
      }

      usersList.innerHTML = users.map(user => `
        <div class="user-card">
          <div class="user-avatar">
            ${user.nome.charAt(0).toUpperCase()}
          </div>
          <h3>${user.nome}</h3>
          <p>üìß ${user.email}</p>
          <p>üìÖ Cadastrado em: ${new Date(user.data_criacao).toLocaleDateString('pt-BR')}</p>
          <div class="user-actions">
            <button class="btn btn-small btn-success" onclick="editUser(${user.id})">
              ‚úèÔ∏è Editar
            </button>
            <button class="btn btn-small btn-danger" onclick="deleteUser(${user.id})">
              üóëÔ∏è Excluir
            </button>
          </div>
        </div>
      `).join('');
    }

    // Fun√ß√£o para criar novo usu√°rio
    document.getElementById('userForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      toggleLoading(true);
      
      const formData = new FormData(e.target);
      const userData = {
        nome: formData.get('nome'),
        email: formData.get('email'),
        senha: formData.get('senha')
      };

      try {
        const response = await fetch('/api/usuarios', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData)
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Erro ao cadastrar usu√°rio');
        }

        // Sucesso
        showMessage(result.message, 'success');
        e.target.reset();
        loadUsers();
        
        // Redirecionar ap√≥s 2 segundos
        setTimeout(() => {
          if (result.redirectUrl) {
            window.location.href = result.redirectUrl;
          }
        }, 2000);

      } catch (error) {
        console.error('Erro:', error);
        showMessage(error.message, 'error');
      } finally {
        toggleLoading(false);
      }
    });

    // Fun√ß√£o para editar usu√°rio (placeholder)
    function editUser(id) {
      const user = users.find(u => u.id === id);
      if (!user) return;

      const newName = prompt('Novo nome:', user.nome);
      const newEmail = prompt('Novo email:', user.email);

      if (newName && newEmail) {
        updateUser(id, { nome: newName, email: newEmail });
      }
    }

    // Fun√ß√£o para atualizar usu√°rio
    async function updateUser(id, userData) {
      try {
        const response = await fetch(`/api/usuarios/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData)
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Erro ao atualizar usu√°rio');
        }

        showMessage(result.message, 'success');
        loadUsers();
      } catch (error) {
        console.error('Erro:', error);
        showMessage(error.message, 'error');
      }
    }

    // Fun√ß√£o para excluir usu√°rio
    async function deleteUser(id) {
      const user = users.find(u => u.id === id);
      if (!user) return;

      if (!confirm(`ü§î Tem certeza que deseja excluir o usu√°rio "${user.nome}"?`)) return;

      try {
        const response = await fetch(`/api/usuarios/${id}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Erro ao excluir usu√°rio');
        }

        showMessage(result.message, 'success');
        loadUsers();
      } catch (error) {
        console.error('Erro:', error);
        showMessage(error.message, 'error');
      }
    }

    // Carregar usu√°rios ao inicializar a p√°gina
    document.addEventListener('DOMContentLoaded', loadUsers);
  </script>
</body>
</html>